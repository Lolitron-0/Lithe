#include "KeyCodes.hpp"
#include "Lithe/Core/Log.hpp"
#include <GLFW/glfw3.h>

namespace Lithe
{
    const std::unordered_map<Keyboard::Key, int> Keyboard::s_KeyToGlfwMap = 
    {
        {Key::Unknown, GLFW_KEY_UNKNOWN },
        { Key::Space            , GLFW_KEY_SPACE },
        { Key::Apostrophe       , GLFW_KEY_APOSTROPHE },
        { Key::Comma            , GLFW_KEY_COMMA },
        { Key::Minus            , GLFW_KEY_MINUS },
        { Key::Period           , GLFW_KEY_PERIOD },
        { Key::Slash            , GLFW_KEY_SLASH },
        { Key::Key0             , GLFW_KEY_0 },
        { Key::Key1             , GLFW_KEY_1 },
        { Key::Key2             , GLFW_KEY_2 },
        { Key::Key3             , GLFW_KEY_3 },
        { Key::Key4             , GLFW_KEY_4 },
        { Key::Key5             , GLFW_KEY_5 },
        { Key::Key6             , GLFW_KEY_6 },
        { Key::Key7             , GLFW_KEY_7 },
        { Key::Key8             , GLFW_KEY_8 },
        { Key::Key9             , GLFW_KEY_9 },
        { Key::Semicolon        , GLFW_KEY_SEMICOLON },
        { Key::EQUAL            , GLFW_KEY_EQUAL },
        { Key::A                , GLFW_KEY_A },
        { Key::B                , GLFW_KEY_B },
        { Key::C                , GLFW_KEY_C },
        { Key::E                , GLFW_KEY_E },
        { Key::F                , GLFW_KEY_F },
        { Key::G                , GLFW_KEY_G },
        { Key::H                , GLFW_KEY_H },
        { Key::I                , GLFW_KEY_I },
        { Key::J                , GLFW_KEY_J },
        { Key::K                , GLFW_KEY_K },
        { Key::L                , GLFW_KEY_L },
        { Key::M                , GLFW_KEY_M },
        { Key::N                , GLFW_KEY_N },
        { Key::O                , GLFW_KEY_O },
        { Key::P                , GLFW_KEY_P },
        { Key::Q                , GLFW_KEY_Q },
        { Key::R                , GLFW_KEY_R },
        { Key::S                , GLFW_KEY_S },
        { Key::T                , GLFW_KEY_T },
        { Key::U                , GLFW_KEY_U },
        { Key::V                , GLFW_KEY_V },
        { Key::W                , GLFW_KEY_W },
        { Key::X                , GLFW_KEY_X },
        { Key::Y                , GLFW_KEY_Y },
        { Key::Z                , GLFW_KEY_Z },
        { Key::LeftBracket      , GLFW_KEY_LEFT_BRACKET },
        { Key::Backslash        , GLFW_KEY_BACKSLASH },
        { Key::RightBracket     , GLFW_KEY_RIGHT_BRACKET },
        { Key::GraveAccent      , GLFW_KEY_GRAVE_ACCENT },
        { Key::World1           , GLFW_KEY_WORLD_1 },
        { Key::World2           , GLFW_KEY_WORLD_2 },
        { Key::Escape           , GLFW_KEY_ESCAPE },
        { Key::Enter            , GLFW_KEY_ENTER },
        { Key::Tab              , GLFW_KEY_TAB },
        { Key::Backspace        , GLFW_KEY_BACKSPACE },
        { Key::Insert           , GLFW_KEY_INSERT },
        { Key::Delete           , GLFW_KEY_DELETE },
        { Key::Right            , GLFW_KEY_RIGHT },
        { Key::Left             , GLFW_KEY_LEFT },
        { Key::Down             , GLFW_KEY_DOWN },
        { Key::Up               , GLFW_KEY_UP },
        { Key::PageUp           , GLFW_KEY_PAGE_UP },
        { Key::PageDown         , GLFW_KEY_PAGE_DOWN },
        { Key::Home             , GLFW_KEY_HOME },
        { Key::End              , GLFW_KEY_END },
        { Key::CapsLock         , GLFW_KEY_CAPS_LOCK },
        { Key::ScrollLock       , GLFW_KEY_SCROLL_LOCK },
        { Key::NumLock          , GLFW_KEY_NUM_LOCK },
        { Key::PrintScreen      , GLFW_KEY_PRINT_SCREEN },
        { Key::Pause            , GLFW_KEY_PAUSE },
        { Key::F1               , GLFW_KEY_F1 },
        { Key::F2               , GLFW_KEY_F2 },
        { Key::F3               , GLFW_KEY_F3 },
        { Key::F4               , GLFW_KEY_F4 },
        { Key::F5               , GLFW_KEY_F5 },
        { Key::F6               , GLFW_KEY_F6 },
        { Key::F7               , GLFW_KEY_F7 },
        { Key::F8               , GLFW_KEY_F8 },
        { Key::F9               , GLFW_KEY_F9 },
        { Key::F10              , GLFW_KEY_F10 },
        { Key::F11              , GLFW_KEY_F11 },
        { Key::F12              , GLFW_KEY_F12 },
        { Key::F13              , GLFW_KEY_F13 },
        { Key::F14              , GLFW_KEY_F14 },
        { Key::F15              , GLFW_KEY_F15 },
        { Key::F16              , GLFW_KEY_F16 },
        { Key::F17              , GLFW_KEY_F17 },
        { Key::F18              , GLFW_KEY_F18 },
        { Key::F19              , GLFW_KEY_F19 },
        { Key::F20              , GLFW_KEY_F20 },
        { Key::F21              , GLFW_KEY_F21 },
        { Key::F22              , GLFW_KEY_F22 },
        { Key::F23              , GLFW_KEY_F23 },
        { Key::F24              , GLFW_KEY_F24 },
        { Key::F25              , GLFW_KEY_F25 },
        { Key::Num0             , GLFW_KEY_KP_0 },
        { Key::Num1             , GLFW_KEY_KP_1 },
        { Key::Num2             , GLFW_KEY_KP_2 },
        { Key::Num3             , GLFW_KEY_KP_3 },
        { Key::Num4             , GLFW_KEY_KP_4 },
        { Key::Num5             , GLFW_KEY_KP_5 },
        { Key::Num6             , GLFW_KEY_KP_6 },
        { Key::Num7             , GLFW_KEY_KP_7 },
        { Key::Num8             , GLFW_KEY_KP_8 },
        { Key::Num9             , GLFW_KEY_KP_9 },
        { Key::NumDecimal       , GLFW_KEY_KP_DECIMAL },
        { Key::NumDivide        , GLFW_KEY_KP_DIVIDE },
        { Key::NumMultiply      , GLFW_KEY_KP_MULTIPLY },
        { Key::NumSubstract     , GLFW_KEY_KP_SUBTRACT },
        { Key::NumAdd           , GLFW_KEY_KP_ADD },
        { Key::NumEnter         , GLFW_KEY_KP_ENTER },
        { Key::NumEqual         , GLFW_KEY_KP_EQUAL },
        { Key::LeftShift        , GLFW_KEY_LEFT_SHIFT },
        { Key::LeftControl      , GLFW_KEY_LEFT_CONTROL },
        { Key::LeftAlt          , GLFW_KEY_LEFT_ALT },
        { Key::LeftSuper        , GLFW_KEY_LEFT_SUPER },
        { Key::RightShift       , GLFW_KEY_RIGHT_SHIFT },
        { Key::RightControl     , GLFW_KEY_RIGHT_CONTROL },
        { Key::RightAlt         , GLFW_KEY_RIGHT_ALT },
        { Key::RightSuper       , GLFW_KEY_RIGHT_SUPER },
        { Key::Menu             , GLFW_KEY_MENU }
    };

    std::unordered_map<int, Keyboard::Key> Keyboard::s_GlfwToKeyMap{};


    int Keyboard::ToGlfwKey(const Key& key)
    {
        return Keyboard::s_KeyToGlfwMap.at(key);
    }

    Keyboard::Key Keyboard::FromGlfwKey(int glfwKey)
    {
        if (Keyboard::s_GlfwToKeyMap.size() == 0)
            for (auto&& it : Keyboard::s_KeyToGlfwMap)
                Keyboard::s_GlfwToKeyMap[it.second] = it.first;
        return Keyboard::s_GlfwToKeyMap.at(glfwKey);
    }

}